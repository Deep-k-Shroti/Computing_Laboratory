#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <dirent.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>

void delete_file(char *, int );

struct dirent *read_dir, *read_del_dir ; 
struct stat buf;

int main(){
	
	

	
	char *tok;
	int counter = 0, file_name_count=0;
	char arg_value[10][256];
	char argument[10][256];
	//har mode[1];
	int mode;
	char del_file[256];
	int i;	
	
	//
	ssize_t cmd_len = 1;; 
	size_t buff_len = 6;
	char *cmd;
	cmd = (char*)malloc(buff_len+1);
	cmd_len = getline(&cmd, &buff_len, stdin);
	//
	//printf("...%s", ptr);
	
	char *ptr = cmd;
	
	while((tok = strtok(ptr," ")) != '\0'){

		//printf("%s \n",tok);
		strcpy(arg_value[counter], tok);
		ptr = NULL;
		counter++;
	}

	strtok(arg_value[counter-1],"\n");

	for(i=0;i<counter;i++){
		sprintf(argument[i],"%s",arg_value[i]);
		printf("<<agr>>>%s\n", argument[i]);
	}

	
	if (strcmp(argument[1] ,"-d") == 0){
		mode ='d';	
		printf("<<mode>> %d\n", mode);
	}
	else if (strcmp(argument[1],"-r") == 0){
		mode ='r';		
		printf("<<mode>> %d\n", mode);
	}
	else{
		strcpy(del_file , argument[1]);
		printf("<<del_file>>%s\n",del_file);
		delete_file(del_file, 0);
	}



	for(file_name_count = 0; file_name_count< counter-2; file_name_count++ ){
		strcpy(del_file , argument[2+file_name_count]);
		printf("<<del_file>>%s\n",del_file);
		delete_file(del_file, mode);
		}

}

	
void delete_file( char *del_file, int mode){
	char cwd[256];
	DIR *dir = NULL, *del_dir = NULL ;
	int file_found = 0;
	int file_count = 0;

	getcwd(cwd , sizeof(cwd));
	dir = opendir(cwd);


	//del_file
	
	while((read_dir = readdir(dir)) != NULL){
		if(strcmp (read_dir->d_name, ".") !=0 && strcmp(read_dir->d_name,"..") != 0 && strcmp(read_dir->d_name, del_file)){
			file_found =1;
			char check_file[1000];
			strcpy(check_file,cwd); 
     		strcat(check_file,"/");
     		strcat(check_file,read_dir->d_name); 

			if(stat(check_file,&buf)==-1) // puts file info in buf
		        perror("stat");
		    if(S_ISDIR(buf.st_mode)){// if directory, then
				
				switch(mode){
					case 'd':
						del_dir = opendir(del_file);
						while((read_del_dir = readdir(del_dir)) != NULL){
							if(strcmp (read_del_dir->d_name, ".") !=0 && strcmp(read_del_dir->d_name,"..") != 0)
								file_count++;
								printf("%d\n", file_count);
						}
						if(!file_count){
							printf("Directory %s removed", del_file);
							remove (del_file);
							break;
						}else
							printf("Can't remove!! Directory not empty");	
							break;
					case 'r':
						del_dir = opendir(del_file);
						while((read_del_dir = readdir(del_dir)) != NULL){
							if(strcmp (read_del_dir->d_name, ".") !=0 && strcmp(read_del_dir->d_name,"..") != 0)
								remove(read_del_dir->d_name);
						}
						remove(del_file);
						printf("Directory %s removed", del_file);
						break;
					default:
						printf("Directory could not be removed");		
				}

			}else{//file
				if(strcmp(read_dir->d_name, del_file))
					remove(del_file);
			}	

				
		}else if (!file_found){
			//printf("File or Directory not found :<<%s>>", read_dir->d_name);	
			file_found = 0;		
		
	}
	
	}
}


/*

if(stat(newp,&buf)==-1) // puts file info in buf
        perror("stat");
     if(S_ISDIR(buf.st_mode))// if directory, then add a "/" to current path
     { 
     //if a directory then call function again(recursion)
        strcat(path1,"/");
        strcat(path1,d->d_name);
        rmq(path1);
     }

/*
DIR *folder;
    struct dirent *result_read_file;

 folder = opendir("result");
    while( (result_read_file = readdir(folder)) != NULL){                   //Reading file list in Result folder
        sprintf(openFile,"result/%s",result_read_file->d_name);             //Converting to String
        
        out_file_len = strlen(openFile);   
        if((openFile[out_file_len - 1] == 't') && (openFile[out_file_len - 2] == 'x') && (openFile[out_file_len - 3] == 't')){//Checking for .txt file
            ptr_result_read_file = fopen(openFile,"r");  
            fscanf(ptr_result_read_file,"%ld%c%ld", &vowels,&tab,&consonants); //Reading the number of Vowels and Consonants
            total_vowels += vowels;
            total_consonants += consonants;            
        fclose(ptr_result_read_file);
        }        
    }*/
    
   
    