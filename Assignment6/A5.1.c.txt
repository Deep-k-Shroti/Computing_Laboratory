/** @file A5.1.c
*  @brief The Skiplist
*
*  Skip   Lists   are   an   alternative   representation   of   balanced   trees   that   provides
* approximate   O(log   n)   access   times   with   the   advantage   that   the   implementation   is
* straightforward   and   the   storage   requirement   is   less   than   a   standard   balanced   tree
* structure.   A   distinct   difference   from   most   search   structures   is   that   the   behaviour   of
* skip lists is probabilistic without dependence on the order of insertion of elements.
*
*  @author Deep K. Shroti
*  @bug No know bugs.
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <limits.h>
#include <math.h>

#define SKIPLIST_MAX_LEVEL 4
FILE *Trace_fp;
FILE *GraphViz_fp;
int currLevel;
int find_count;
char filename[50];


typedef struct snode {
    int key;
    char value[50];
    int height;
    struct snode **forward;
} snode;

typedef struct skiplist {
    int level;
    // int size;
    struct snode *header;
} skiplist;

skiplist master_skiplist, ir_skiplist, algo_skiplist;
int algo_roll_list[3000];

int search_count;
int total_algo_line;

void masterListFunction(void);
void irListFunction(void);
void algoListFunction(void);

skiplist *initiate(skiplist *list);
int inserth(skiplist *list, int key, char *value, int height);
snode *find(skiplist *list, int key);
static void freeNode(snode *x);
int delete(skiplist *list, int key);
void print(skiplist *list);
void skiplistFree(skiplist *list);
void display(skiplist *list);
snode *newfind(snode *start, int key);


/** @briefvoid masterListFunction() reads the master list
*
*   This function helps to read Master List <key,value,height>
*   and it passes value read from sample Master List to inserth() to insert them into the skiplist
*   The input is taken through a file and will be as follows:­
*   Subsequent  ​lines will be in the form of “​key,value,height ​”
*
*  @param void
*  @return void
*
*/
void masterListFunction(){
    FILE *master_list_fp;

    char buff[50],master_list_line[50], name[50];
    char *tok;
    int master_list_line_count = 0;
    int roll_no, height;

    master_list_fp = fopen("MasterList.csv", "r");


    if(master_list_fp == NULL)
    printf("Error! File not found \n");

    // printf("\n<< MASTER LIST >>\n");
    initiate(&master_skiplist);

    while(fgets(buff,50,master_list_fp) != NULL){
        strcpy(master_list_line, buff);
        strtok(master_list_line,"\n");
        // printf("%s\n", master_list_line);

        char *ptr = master_list_line;
        int token_counter = 0;
        while((tok = strtok(ptr,","))!='\0'){
            token_counter++;
            switch (token_counter){
                case 1 :
                roll_no = atoi(tok);
                break;

                case 2 :
                    if(tok[0] == '\"')
                    {
                        tok++;
                        char *tok1 = strtok(NULL, "\"");
                        sprintf(name,"%s%s",tok,tok1);
                    }
                    else if(tok[1] == '\"')
                    {

                        tok++;
                        tok++;
                        char *tok1 = strtok(NULL, "\"");
                        sprintf(name,"%s%s",tok,tok1);

                    }
                    else
                        strcpy(name, tok);
                    // printf("%s\n",name);
                    break;


                case 3 :
                height = atoi(tok);
                break;
            }
            ptr = NULL;
        }
        master_list_line_count++;
        // printf("KEY: %d  VALUE: %s  HEIGHT:%d\n",roll_no,name, height);
        inserth(&master_skiplist, roll_no, name, height);
    }
    fclose(master_list_fp);

    // print(&master_skiplist);
    // display(&master_skiplist);
    // skiplistFree(&master_skiplist);
}



/** @briefvoid irListFunction() reads the master list
*
*   This function helps to read IR course List <key,value,height>
*   and it passes value read from  IR course List to inserth() to insert them into the skiplist
*   The input is taken through a file and will be as follows:­
*   Subsequent  ​lines will be in the form of “​key,value,height ​”
*
*  @param void
*  @return void
*
*/
void irListFunction(){
    FILE *ir_list_fp;

    char buff[50],ir_list_line[50], name[50];
    char *tok;
    int ir_list_line_count = 0;
    int roll_no, height;

    ir_list_fp = fopen("IR.csv", "r");

    if(ir_list_fp == NULL)
    printf("Error! File not found \n");

    // printf("\n<< IR LIST >>\n");
    initiate(&ir_skiplist);

    while(fgets(buff,50,ir_list_fp) != NULL){
        strcpy(ir_list_line, buff);
        strtok(ir_list_line,"\n");
        // printf("%s\n", ir_list_line);

        char *ptr = ir_list_line;
        int token_counter = 0;
        while((tok = strtok(ptr,","))!='\0'){
            token_counter++;
            switch (token_counter){
                case 1 :
                roll_no = atoi(tok);
                break;

                case 2 :


                    if(tok[0] == '\"')
                    {
                        tok++;
                        char *tok1 = strtok(NULL, "\"");
                        sprintf(name,"%s%s",tok,tok1);
                    }
                    else if(tok[1] == '\"')
                    {

                        tok++;
                        tok++;
                        char *tok1 = strtok(NULL, "\"");
                        sprintf(name,"%s%s",tok,tok1);

                    }
                    else
                        strcpy(name, tok);
                    // printf("%s\n",name);
                    break;

                case 3 :
                height = atoi(tok);
                break;
            }
            ptr = NULL;
        }
        ir_list_line_count++;
        // printf("KEY: %d  VALUE: %s  HEIGHT:%d\n",roll_no,name, height);
        inserth(&ir_skiplist, roll_no, name, height);
    }
    // printf("ir_list_line_count:%d", ir_list_line_count);
    fclose(ir_list_fp);

    // print(&ir_skiplist);
    // display(&ir_skiplist);
    // skiplistFree(&ir_skiplist);
}

/** @briefvoid irListFunction() reads the master list
*
*   This function helps to read Algo course List <key,value,height>
*   and it passes value read from  Algo course List to inserth() to insert them into the skiplist
*   The input is taken through a file and will be as follows:­
*   Subsequent  ​lines will be in the form of “​key,value,height ​”
*
*  @param void
*  @return void
*
*/
void algoListFunction(){
    FILE *algo_list_fp;

    char buff[50],algo_list_line[50], name[50];
    char *tok;
    int algo_list_line_count = 0;
    int roll_no, height;

    int i;
    for(i = 0; i<3000; i++){
        algo_roll_list[i] = 0;
    }

    algo_list_fp = fopen("Algo.csv", "r");
    if(algo_list_fp == NULL)
    printf("Error! File not found \n");

    // printf("\n<< ALGO LIST >>\n");
    initiate(&algo_skiplist);

    while(fgets(buff,50,algo_list_fp) != NULL){
        strcpy(algo_list_line, buff);
        strtok(algo_list_line,"\n");
        // printf("%s\n", algo_list_line);

        char *ptr = algo_list_line;
        int token_counter = 0;
        while((tok = strtok(ptr,","))!='\0'){
            token_counter++;
            switch (token_counter){
                case 1 :
                roll_no = atoi(tok);
                break;

                case 2 :


                if(tok[0] == '\"')
                {
                    tok++;
                    char *tok1 = strtok(NULL, "\"");
                    sprintf(name,"%s%s",tok,tok1);
                }
                else if(tok[1] == '\"')
                {

                    tok++;
                    tok++;
                    char *tok1 = strtok(NULL, "\"");
                    sprintf(name,"%s%s",tok,tok1);

                }
                else
                    strcpy(name, tok);
                // printf("%s\n",name);
                break;

                case 3 :
                height = atoi(tok);
                break;
            }
            ptr = NULL;
        }
        algo_roll_list[algo_list_line_count] = roll_no;

        algo_list_line_count++;
        total_algo_line = algo_list_line_count;
        // printf("KEY: %d  VALUE: %s  HEIGHT:%d\n",roll_no,name, height);
        inserth(&algo_skiplist, roll_no, name, height);
    }
    // printf("algo_list_line_count:%d", total_algo_line);
    fclose(algo_list_fp);

    // print(&algo_skiplist);
    // display(&algo_skiplist);
    // skiplistFree(&algo_skiplist);
}

/** @brief skiplist *initiate(skiplist *list)
*
*  This function initiates the skip list with header.
*  the head has a maximum key value of INT_MAX. and the list level is set to 1 initially.
*  It takes input parameter as a skiplist and returns a skiplist with header specified.
*
*  @param skiplist *list
*  @return skiplist *
*
*/
skiplist *initiate(skiplist *list)
{
    int i;
    snode *header = (snode *)malloc(sizeof(struct snode));
    list->header = header;
    header->key = INT_MAX;
    header->forward = (snode **)malloc(sizeof(snode*) * (SKIPLIST_MAX_LEVEL+1));
    for (i = 0; i <= SKIPLIST_MAX_LEVEL; i++) {
        header->forward[i] = list->header;
    }

    list->level = 1;
    return list;
}

/** @brief int inserth(skiplist *list, int key, char *value, int height)
*
*  This function helps to insert   a   node   into   the   skip   list   with   the   key
*  and   value   as   given   using   ​'h'   as   the   node   height.
*   If   the   key   already   exists, then the value is updated with a new value.
*
*  @param skiplist *list
*  @param int key
*  @param char *value
*   @param int height
*
*  @return int on success
*
*/
int inserth(skiplist *list, int key, char *value, int height){

    snode *update[SKIPLIST_MAX_LEVEL+1];
    snode *x = list->header;
    int i, level;
    for (i = list->level; i >= 1; i--) {
        while (x->forward[i]->key < key)
        x = x->forward[i];
        update[i] = x;
    }
    x = x->forward[1];

    if (key == x->key) {

        strcpy(x->value, value);
        return 0;
    } else {
        level = height;
        if (level > list->level) {
            for (i = list->level+1; i <= level; i++) {
                update[i] = list->header;
            }
            list->level = level;
        }

        x = (snode *)malloc(sizeof(snode));
        x->key = key;
        strcpy(x->value, value);
        x->height = level;
        x->forward = (snode **)malloc(sizeof(snode*) * (level + 1));

        for (i = 1; i <= level; i++) {
            x->forward[i] = update[i]->forward[i];
            update[i]->forward[i] = x;
        }
    }
    return 0;
}



/** @brief node *find(skiplist *list, int key)
*
*  This function helps to find in the SkipList the value corresponding to the key provided.
*  The function return a node for corresponding key value if the key is fouund else
*  return a NULL value
*
*  @param skiplist *list
*  @param int key
*  @return node *
*
*/
snode *find(skiplist *list, int key){
    // printf("searching key:%d...\t\t", key);
    snode *x = list->header;
    int i;
    for (i = list->level; i >= 1; i--) {
        while (x->forward[i]->key < key)
        x = x->forward[i];
        search_count++;
    }
    if (x->forward[1]->key == key) {
        return x->forward[1];
    } else {
        return NULL;
    }
    return NULL;
}


/** @brief static void freeNode(node *x)
*
*  This function helps to free the node corresponding to node *x
*
*  @param node *x
*  @return void
*
*/
static void freeNode(snode *x)
{
    if (x) {
        free(x->forward);
        free(x);
    }
}


/** @brief iint delete(skiplist *list, int key){

*
*  This function helps to delete the node from the SkipList  with the given key
*  and returns 0 if the key is found
*
*   @param skiplist *list
*   @param int key
*  @return int
*
*/
int delete(skiplist *list, int key){
    int i;
    snode *update[SKIPLIST_MAX_LEVEL + 1];
    snode *x = list->header;
    for (i = list->level; i >= 1; i--) {
        while (x->forward[i]->key < key)
        x = x->forward[i];
        update[i] = x;
    }

    x = x->forward[1];
    if (x->key == key) {
        for (i = 1; i <= list->level; i++) {
            if (update[i]->forward[i] != x)
            break;
            update[i]->forward[i] = x->forward[i];
        }
        freeNode(x);

        while (list->level > 1 && list->header->forward[list->level] == list->header)
        list->level--;
        return 0;
    }
    return 1;
}



/** @brief void print(skiplist *list)
*
*  This function helps to print the skip list on the stdout.
*  and returns the hieght of the node.
*
*  @param skiplist *list
*  @return int level
*
*/
void print(skiplist *list){
    printf("\n");
    snode *x = list->header;
    while (x && x->forward[1] != list->header) {
        printf("%d[%s]_%d->", x->forward[1]->key, x->forward[1]->value, x->forward[1]->height);
        x = x->forward[1];
    }
    printf("NIL\n");
}



/** @brief  skiplistFree(skiplist *list)
*
*  This function helps to create Maach and Dal.
*  To avoid race condition between the threads pthread_mutex_lock() function is used.
*  We have a pthread_mutex_t called 'chef_mutex' will helps to avoid any race condition if possible.
*  sem_wait(), sem_post() functions are used for semaphore. It will ensure that no deadlock condition
*  between the producer and the consumer.
*
*
*  @param void
*  @return prints Maach on the log
*  @return prints Dal on the log
*/
void skiplistFree(skiplist *list){
    snode *current_node = list->header;
    while( current_node && current_node->forward[1] != list->header) {
        snode *next_node = current_node->forward[1];
        // printf("Skiplist_free Key: %d\n", current_node->forward[1]->key);
        free(current_node->forward);
        free(current_node);
        current_node = next_node;
    }
}


/** @brief void display(skiplist *list)
*
*  This function helps to display the Skiplist in GraphViz.dot form
* Output the skip list as a GraphViz DOT document which helps in visualising the data structure
*
*
*  @param skiplist *list
*  @return void
*
*/
void display(skiplist *list){
    int node_count = 1, height_count;
    int *arr = (int *)malloc(sizeof(int));
    snode *x = list->header;

    GraphViz_fp = fopen(filename, "w");
    fprintf(GraphViz_fp,"strict digraph skiplist {\n\trankdir = LR;\n\tnode [shape=record, style = filled];\n\n");

    while (x && x->forward[1] != list->header) {
        // while(x->forward[0]->key != INT_MAX){
        x = x->forward[1];

        arr = (int *)realloc(arr, sizeof(int) * node_count);
        arr[node_count-1] = x->key;

        fprintf(GraphViz_fp,"\tnode%d[label=\"", x->key);

        for( height_count = x->height; height_count >= 1; height_count-- ){
            fprintf(GraphViz_fp, "<l%d> level %d|", height_count, height_count);
        }
        fprintf(GraphViz_fp,"%d",x->key);
        fprintf(GraphViz_fp,"\", fillcolor = \"deepskyblue\"];\n");

        node_count++;
    }

    FILE *trace_fp;
    char buff[500];
    trace_fp = fopen("Trace.dot", "r");

    while(fgets(buff, 500, trace_fp) != NULL){
        fprintf(GraphViz_fp, "%s", buff);
        }
        fprintf(GraphViz_fp,"\n");



        x = list->header;
        fprintf(GraphViz_fp,"\n");
        while (x && x->forward[1] != list->header) {
            x = x->forward[1];

            for( height_count = x->height; height_count >= 1; height_count-- ){
                fprintf(GraphViz_fp,"\tnode%d:l%d -> ", x->key, height_count);
                if(x->forward[height_count]->key == INT_MAX)
                fprintf(GraphViz_fp,"null;\n");
                else
                // printf("node%d:l%d;\n",x->forward[height_count]->key, height_count);
                fprintf(GraphViz_fp,"node%d:l%d;\n",x->forward[height_count]->key, height_count);
            }
        }

        fprintf(GraphViz_fp,"\n}\n");
        fclose(GraphViz_fp);
    }

    /** @brief node *newfind(snode *list, int key)
    *
    *  This function helps to find in the SkipList the value corresponding to the key provided in an intelligent manner.
    *  The function returns a node for corresponding key value if the key is found else
    *  returns a next node value
    *
    *  @param snode *start
    *  @param int key
    *  @return snode *
    *
    */
    snode *newfind(snode *start, int key){

        int i = 1;

        snode *pointer = start;
        if(start->height >= currLevel){
            i = currLevel ;
        }


        while((i < pointer->height-1) && (pointer->key < key)) {
            //fprintf(Trace_fp,"\tnode%d:l%d -> node%d:l%d [color=\"0.002 0.999 0.999\"]; \n",pointer->key,i,pointer->key,i+1);
            i++;
            find_count += 1;
        }

        while( pointer->key < key){
            while( (pointer->forward[i]->key <= key)  ){

                fprintf(Trace_fp,"\tnode%d:l%d -> node%d:l%d [color=\"0.002 0.999 0.999\"]; \n",pointer->key,i,pointer->forward[i]->key,i);
                pointer = pointer->forward[i];
                find_count += 1;
                while((i < pointer->height-1) && (pointer->key < key)) {
                    fprintf(Trace_fp,"\tnode%d:l%d -> node%d:l%d [color=\"0.002 0.999 0.999\"]; \n",pointer->key,i,pointer->key,i+1);
                    //printf("\tnode%d:l%d -> node%d:l%d [color=\"0.002 0.999 0.999\"]; \n",pointer->key,i,pointer->key,i+1);
                    find_count += 1;
                    i++;
                }
            }


            if( pointer->key >= key ){

                return pointer;
            }
            else if(i == 1){

                fprintf(Trace_fp,"\tnode%d:l%d -> node%d:l%d [color=\"0.002 0.999 0.999\"]; \n",pointer->key,i,pointer->forward[i]->key,i);
                pointer = pointer->forward[i];
                currLevel = i;
                find_count++;

                return pointer;
            }

            if(i > 1){
                fprintf(Trace_fp,"\tnode%d:l%d -> node%d:l%d [color=\"0.002 0.999 0.999\"]; \n",pointer->key,i,pointer->key,i-1);
                find_count += 1;
                i--;
            }
        }
        currLevel = i;

        return pointer;
    }

    /** @brief void main()
    *
    *  This function helps to call masterListFunction(), algoListFunction  and irListFunction().
    *  I also contains the code for the 4 search queries given.
    *  @param void
    *  @return void
    *
    */
    int main(){

        int count;

        printf("Creating Master Skip List...\n");
        masterListFunction();

        for(count = 0; count < 3000 ; count++){
            algo_roll_list[count] = 0;
        }
        printf("Creating Algo Skip List......\n");
        algoListFunction();

        printf("Creating IR Skip List......\n");
        irListFunction();


        ///////////////////////////////////////////////////Query 1///////////////////////////////////////////////////////////////////
        printf("Computing Query 1: All the B.Tech 4th year students who are in the 2nd and 3rd department \n");
        Trace_fp = fopen("Trace.dot", "w");
        sprintf(filename, "%s", "GraphViz1.dot");

        FILE *Query_1_output_fp;
        Query_1_output_fp = fopen("Query_1_log.csv","w");


        int student_count_1 = 0;
        currLevel = 1;
        find_count = 0;
        snode *start_node_1 = master_skiplist.header->forward[1];
        for(count = 140201 ; count <= 140399; count++){
            snode *x = newfind(start_node_1,count);
            if (x->key == count) {
                if( Query_1_output_fp == NULL){
                    printf("Error! File not Created\n");
                }else{
                    fprintf(Query_1_output_fp,"Found key = %d, value = %s\n", count, x->value);
                    // printf("Found key = %d, value = %s\n", count, x->value);
                }
                student_count_1++;
            }
            start_node_1 = x;
        }
        fclose(Query_1_output_fp);
        fclose(Trace_fp);
        display(&master_skiplist);
        printf("Computing Query 1: Total Search Count: %d Result: %d\n",find_count, student_count_1);

        ///////////////////////////////////////////////////Query 2///////////////////////////////////////////////////////////////////
        printf("Computing Query 2: All the students who are enrolled in Algorithms but not in IR and is a student of 3rd, 4th or 5th Department\n");
        Trace_fp = fopen("Trace.dot", "w");
        sprintf(filename, "%s", "GraphViz2.dot");

        FILE *Query_2_output_fp;
        Query_2_output_fp = fopen("Query_2_log.csv","w");

        int student_count_2 = 0;
        find_count = 0;
        snode *node_ir = ir_skiplist.header->forward[1];
        snode *node_algo = algo_skiplist.header->forward[1];
        while(1){
            if( (node_ir->key == INT_MAX) || (node_algo->key == INT_MAX))
            break;

            snode *x = newfind(node_ir,node_algo->key);
            if (x->key != node_algo->key) {
                if((node_algo->key/100)%100 == 03 || (node_algo->key/100)%100 == 04 || (node_algo->key/100)%100 == 05){
                    if( Query_2_output_fp == NULL){
                        printf("Error! File not Created\n");
                    }else{
                        fprintf(Query_2_output_fp,"Found key = %d, value = %s\n", node_algo->key, node_algo->value);
                        // printf("Found key = %d, value = %s\n", node_algo->key, node_algo->value);
                    }
                    student_count_2++;
                }
            }
            node_ir = x;
            node_algo = node_algo->forward[1];
        }
        fclose(Query_2_output_fp);
        fclose(Trace_fp);
        display(&master_skiplist);
        printf("Computing Query 2: Total Search Count: %d Result: %d\n",find_count, student_count_2);

        //
        // for(count = 0; count < total_algo_line ; count++){
        //      snode *x = find(&ir_skiplist,algo_roll_list[count]);
        //         if (x) {
        //             printf("key = %d, value = %s\n", algo_roll_list[count], x->value);
        //             // student_count_2++;
        //         }else{
        //             printf(">>>>>>>>>>.count:%d\n",count);
        //             printf("NOT FOUND key = %d\n", algo_roll_list[count]);
        //             student_count_2++;
        //         }
        // }
        // printf("Result: %d\n", student_count_2);
        //
        ///////////////////////////////////////////////////Query 3///////////////////////////////////////////////////////////////////
        printf("Computing Query 3: The number of students who have taken both Algorithms and IR. \n");
        Trace_fp = fopen("Trace.dot", "w");
        sprintf(filename, "%s", "GraphViz3.dot");

        FILE *Query_3_output_fp;
        Query_3_output_fp = fopen("Query_3_log.csv","w");

        int student_count_3 = 0;
        find_count = 0;
        node_ir = ir_skiplist.header->forward[1];
        node_algo = algo_skiplist.header->forward[1];
        while(1){
            if( (node_ir->key == INT_MAX) || (node_algo->key == INT_MAX))
            break;

            snode *x = newfind(node_ir,node_algo->key);
            if (x->key == node_algo->key) {
                if( Query_3_output_fp == NULL){
                    printf("Error! File not Created\n");
                }else{
                    fprintf(Query_3_output_fp,"Found key = %d, value = %s\n", x->key , x->value);
                    // printf("Found key = %d, value = %s\n", x->key , x->value);
                }
                student_count_3++;
            }
            node_ir = x;
            node_algo = node_algo->forward[1];
        }
        fclose(Query_3_output_fp);
        fclose(Trace_fp);
        display(&master_skiplist);
        printf("Computing Query 3: Total Search Count: %d Result: %d\n",find_count, student_count_3);
        // int student_count_3 = 0;
        // currLevel = 1;
        // find_count = 0;
        // snode *start_node_2 = ir_skiplist.header->forward[1];
        //
        // // printf("algo_list_line_count:%d\n", total_algo_line);
        // for(count = 0; count < total_algo_line ; count++){
        //     // printf("algo_roll_list[%d]:%d\t",count, algo_roll_list[count]);
        //     // printf("start_node_2->key:%d\n", start_node_2->key);
        //     snode *x = newfind(start_node_2,algo_roll_list[count]);
        //     if (x->key == algo_roll_list[count]) {
        //         printf("Found key = %d, value = %s\n", count, x->value);
        //         student_count_3++;
        //     }
        //     start_node_2 = x;
        // }
        // printf("Total Search Count: %d Result: %d\n",find_count, student_count_3);

        ///////////////////////////////////////////////////Query 4///////////////////////////////////////////////////////////////////
        printf("Computing Query 4: The number of students who have taken either Algorithms or IR\n");

        FILE *Query_4_output_fp;
        Query_4_output_fp = fopen("Query_4_log.csv","w");
        Trace_fp = fopen("Trace.dot", "w");
        sprintf(filename, "%s", "GraphViz4.dot");

        find_count = 0;
        int student_count_4 = 0;

        node_ir = ir_skiplist.header->forward[1];//temp ir
        node_algo = algo_skiplist.header->forward[1];
        Trace_fp = fopen("Trace.dot", "a");
        while( ( node_algo->key < INT_MAX) || ( node_ir->key < INT_MAX) ){
            if( node_algo->key ==  node_ir->key){
                if( Query_4_output_fp == NULL){
                    printf("Error! File not Created\n");
                }else{
                    fprintf(Query_4_output_fp,"Found key = %d, value = %s\n", node_algo->key, node_algo->value);
                    //   printf("Found key = %d, value = %s\n", node_algo->key, node_algo->value);
                }

                student_count_4++;
                if( node_algo->key < INT_MAX){
                    fprintf(Trace_fp,"\tnode%d:l0 -> node%d:l0 [color=\"0.002 0.999 0.999\"]; \n",node_algo->key,node_algo->forward[1]->key);
                    find_count++;
                    node_algo = node_algo->forward[1];
                }
                if( node_ir->key < INT_MAX){
                    node_ir = node_ir->forward[1];
                    find_count++;
                }
            }
            else if (node_algo->key < node_ir->key){
                if( Query_4_output_fp == NULL){
                    printf("Error! File not Created\n");
                }else{
                    fprintf(Query_4_output_fp,"Found key = %d, value = %s\n", node_algo->key, node_algo->value);
                    // printf("Found key = %d, value = %s\n", node_algo->key, node_algo->value);
                }


                student_count_4++;
                if( node_algo->key < INT_MAX){
                    fprintf(Trace_fp,"\tnode%d:l0 -> node%d:l0 [color=\"0.002 0.999 0.999\"]; \n",node_algo->key,node_algo->forward[1]->key);
                    find_count++;
                    node_algo = node_algo->forward[1];
                }
            }

            else if  (node_ir->key < node_algo->key){
                if( Query_4_output_fp == NULL){
                    printf("Error! File not Created\n");
                }else{
                    fprintf(Query_4_output_fp,"Found key = %d, value = %s\n", node_ir->key, node_ir->value);
                    //   printf("Found key = %d, value = %s\n", node_ir->key, node_ir->value);
                }

                student_count_4++;
                if( node_ir->key < INT_MAX){
                    node_ir = node_ir->forward[1];
                    find_count++;
                }
            }
        }
        fclose(Query_4_output_fp);
        fclose(Trace_fp);
        display(&master_skiplist);
        printf("Computing Query 4: Total Search Count: %d Result: %d\n",find_count, student_count_4);
	return 0;
    }
