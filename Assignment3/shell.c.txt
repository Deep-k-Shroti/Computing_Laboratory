/**
@file shell.c
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdbool.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
#include <termios.h>



#define HISTORY_COUNT 20

// global variable declaration
int back_process_count = 0;
int history_current = 0;
char argument[10][256] ;

/** @brief Prints the history, starting at the current
 *         location of the cursor.
 *
 *  It prints the past command history till the current command.
 *
 *  @param *hist[]  The history array
 *  @param current The Current command typed
 *  @return Prints the past history
 *  @return Returns interger 0 on success
 */
int history(char *hist[], int current){
    int i = current;
    int hist_num = 1;

    // if(key == 0 && history_current >= 0){
    // 	printf("%s",hist[history_current]);
    // }
    // else if(key == 1 && history_current >= 0){
    // 	printf("%s",hist[history_current]);
    // }
    // else{
    // 	printf("No Previous Entry");
    // }

    do {
        if (hist[i]) {
        	printf("%4d  %s\n", hist_num, hist[i]);
            hist_num++;
        }
        i = (i + 1) % HISTORY_COUNT;
	} while (i != current);
    return 0;
}



/** @brief Handles the background Process
 *
 *  It handles backgroud process by waitnig in WNOHANG mode
 * it also keeps count of the background process currently working
 *
 *  @param  sig   An integer input to signal that a chlid process has finished
 *  @return Void
 *  
 */

void handler(int sig){
  	pid_t pid;
  	int   stat; 
  	while ( (pid = waitpid(-1, &stat, WNOHANG)) > 0) {
    	printf("[%d] Child %d terminated\n",back_process_count, pid);
   	    back_process_count--;
	}
	return;
}

/** @brief  binCommand handles the execlp() command format
 * It takes in the number of arguments and 
 * switch to the particular execlp() command.
 *
 *  @param   argument_len  An integer variable to pass the argument length 
 *  @return void
 *  
 */
void binCommand (int argument_len){

	switch(argument_len){
		case 1:
			execlp(argument[0],argument[0],NULL);

		case 2:
			execlp(argument[0],argument[0],argument[1],NULL);

		case 3:
			execlp(argument[0],argument[0],argument[1],argument[2],NULL);

		case 4:
			execlp(argument[0],argument[0],argument[1],argument[2], argument[3],NULL);


		case 5:
			execlp(argument[0],argument[0],argument[1],argument[2], argument[3], argument[4],NULL);		
	}
}



/** @brief It is the main shell of the custom shell
 * It takes in the command ine argument in a continuous loop
 * If the input function is found in the list of written commands then it 
 * forks to that executable command file
 *
 *  @param  Command ine argument
 *  @return void
 *  
 */

void main(int argc , char *argv[]){

	// Initialisations
	ssize_t cmd_len = 1;; 
	size_t buff_len = 6;
	char *cmd;
	cmd = (char*)malloc(buff_len+1);
	// long int pid;
	pid_t pid;
	long int shell_pid;
	int count, main_loop_count;

	char *tok;
    char *pipe_tok;
    int counter;
    int arg_pipe_counter;
	
	char exe_loc[256];
	char cwd[256];
	char shell_dir[256];
	char cmd_string[256];
	char input_file[64];
	char output_file[64];
	bool fdin_flag = false, fdout_flag = false, back_process_flag = false;

	int fdin,fdout,stdOut_fd,stdIn_fd;
	
	int status;

	char cmd_history[256];
	int history_current = 0;
	int history_length = 20;
	
	char *history_list[HISTORY_COUNT];
	

	char input_pipe[64];
	char output_pipe[64];
	int pipe_count = 0;
	int pipe_fd[2];
 	int temp_pipe_fd_in = 0;

 	char arg_pipe[10][256] ;

	// for(count = 0 ; count<10 ; count++){
	// 	sprintf(argument[count],"%s","\0");
	// }

	for (count = 0; count < HISTORY_COUNT; count++){
		history_list[count] = NULL;	
	}
                

	// getting the current working directory
	getcwd(shell_dir,sizeof(shell_dir));

	stdOut_fd = dup(STDOUT_FILENO);
	stdIn_fd = dup(STDIN_FILENO);

	while(1){
		shell_pid = getpid();
		getcwd(cwd,sizeof(cwd));
		printf("[shell_pid]=%ld ", shell_pid);
		printf("myshell@mybash:%s$ ",cwd);
		

		if((cmd_len =  getline(&cmd, &buff_len, stdin)) == -1){
			puts("ERROR");
		}
			

		strcpy(cmd_history,cmd);
		if (cmd_history[strlen(cmd_history) - 1] == '\n')
       		cmd_history[strlen(cmd_history) - 1] = '\0';
	
		free(history_list[history_current]);
		history_list[history_current]= strdup(cmd_history);
		history_current = (history_current + 1) % HISTORY_COUNT;

		if (strcmp(cmd, "history\n") == 0)
      	 	history(history_list, history_current);


		char *cmd_ptr = cmd;
    	arg_pipe_counter = 0;

    	while((pipe_tok = strtok(cmd_ptr, "|")) != '\0'){
	     
	      strcpy(arg_pipe[arg_pipe_counter],pipe_tok);
	      cmd_ptr = NULL;
	      arg_pipe_counter++;
	    }
	    strtok(arg_pipe[arg_pipe_counter-1],"\n");
	    pipe_count = arg_pipe_counter-1;
		

	    for(count = 0 ; count<10 ; count++){
      		sprintf(argument[count],"%s","\0");
    	}

				
		for (main_loop_count = 0 ; main_loop_count <= pipe_count; main_loop_count++){
      		char *ptr = arg_pipe[main_loop_count];
	      	counter = 0;
	      	while((tok = strtok(ptr," ")) != '\0'){
	          strcpy(argument[counter], tok);
	          ptr = NULL;
	          counter++;
	        }
	      	strtok(argument[counter-1],"\n");

			//it helps in creating a pipe with a file descriptor pipe_fd 
			pipe(pipe_fd);
	   	

			if(argument[0]!= NULL){
				for (count = 0; count < counter-1; count++){		
					if(strcmp(argument[count], "<") == 0 && strcmp(argument[count-1],"\0" ) !=0 && strcmp(argument[count+1],"\0" ) !=0){
						strcpy(input_file,argument[count-1]);

                        if ((fdin = open(input_file,O_WRONLY | O_CREAT | O_APPEND , 0666)) == -1){
                            fprintf(stderr," Could not open file %s for reading.\n",input_file);
                        }
						
						//printf("fdin=%d\n",fdin);
                        
                        if (dup2(fdin,STDIN_FILENO)== -1){
                            fprintf(stderr,"dup2 Error");
                        }else{
                        	fdin_flag = true;
                        }
                    }
					else if(strcmp(argument[count], ">")== 0  && strcmp(argument[count-1],"\0" ) !=0 && strcmp(argument[count+1],"\0" ) !=0){
						strcpy(output_file,argument[count+1]);
	                	if ((fdout = open(output_file,O_WRONLY|O_CREAT|O_TRUNC)) == -1){
							fprintf(stderr," Could not open file %s for writing.\n",output_file);
						}

						close(STDOUT_FILENO);
	               		if ( dup2(fdout,STDOUT_FILENO)== -1){
							fprintf(stderr,"dup2 Error");
						}else{
							fdout_flag = true;
						}
		            }
				}
			}


			if(strcmp(argument[counter -1], "&")==0){
					back_process_flag = true;
					signal(SIGCHLD, handler);
			} 

			//Handling different commands 
			if(strcmp(argument[0], "myexit") == 0){
				printf("Exit Successfull!!\n");
				exit(0);
			} 
			else if(strcmp(argument[0], "mycd")== 0){
				int status;
				char path[256];				
				sprintf(path,"%s/%s",cwd,argument[1]);

				if((status = chdir(path)) == -1){
					perror("chdir");
					//printf("Failed to change the directory!\n");
				}else{
					printf("Change directory successfull!\n");
				}
			}
			else if((pid=fork())==0){
				
				dup2(temp_pipe_fd_in, 0); //the input is changed wrt to the old one 
	          	if(main_loop_count < pipe_count)
	          	dup2(pipe_fd[1], 1);
	            close(pipe_fd[0]);


				if(strcmp(argument[counter -1], "&")==0){
					back_process_flag = true;
					back_process_count++;
					//signal(SIGCHLD, handler);
					setpgid(0, 0);
				} 	 

				if(strcmp(argument[0], "mypwd")== 0){
					sprintf(exe_loc, "%s/mypwd.out",shell_dir);
					if(execlp(exe_loc,exe_loc,NULL)==-1)
						perror("execlp");
				}	

				else if(strcmp(argument[0], "mymkdir")== 0){
					sprintf(exe_loc, "%s/mymkdir.out", shell_dir);	//printf("mymkdir");
					if(execlp(exe_loc,cmd_string,argument[1],argument[2],argument[3],argument[4], NULL)==-1)
					perror("execlp");
					exit(0);  
				}

				else if(strcmp(argument[0], "myrm")== 0){
					sprintf(exe_loc, "%s/myrm.out", shell_dir);
					if(execlp(exe_loc,exe_loc,argument[1],argument[2],argument[3],argument[4],NULL)==-1)
						perror("execlp");
					exit(0);
				}
				else if(strcmp(argument[0], "mymv")== 0){
					sprintf(exe_loc, "%s/mymv.out", shell_dir);	
					if(execlp(exe_loc,exe_loc,argument[1],argument[2], NULL)==-1)
						perror("execlp");
					exit(0);  
				}	
					else if(strcmp(argument[0], "myps")== 0){
					sprintf(exe_loc, "%s/myps.out", shell_dir);
					if(execlp(exe_loc,exe_loc,argument[1],NULL)==-1)
						perror("execlp");
					exit(0);
				}
						
				else if(strcmp(argument[0], "myls")== 0){
					sprintf(exe_loc, "%s/myls.out", shell_dir);	
					if(execlp(exe_loc,exe_loc,NULL)==-1)
						perror("execlp");									
					exit(0);	
				}		
					
				else if(strcmp(argument[0], "mytail")== 0){
					sprintf(exe_loc, "%s/mytail.out", shell_dir);	
					if(execlp(exe_loc,exe_loc,argument[1],argument[2],NULL)==-1)
						perror("execlp");
					exit(0);
				}

				else{
					binCommand(counter);
					exit(EXIT_FAILURE);
				}		
			}
			else{
				if (back_process_flag){	
					waitpid(-1, &status, WNOHANG);
				}
				else{
	            	  wait(&status);
				}
					close(pipe_fd[1]);
	          		temp_pipe_fd_in = pipe_fd[0];
				
				if(fdin_flag)
					close(fdin);
				if(fdout_flag)
					close(fdout);

				dup2(stdOut_fd,1);
				dup2(stdIn_fd,0);
			}
		}
	}
}


		