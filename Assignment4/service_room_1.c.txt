/**
*  @file service_room_1.c
*  @brief The service room Process
*
*
*  @author Deep K. Shroti
*  @bug No know bugs.
*/

#include <stdio.h>
#include <semaphore.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <time.h>

sem_t *bhaatEnable;
FILE *fp;
FILE *guest_book_fp;
FILE *service_room_occu_fp;

#define SERVICE_ROOM_KEY 7004
#define GUEST_COUNT_KEY 7005
#define MAX_GUEST_NUMBER 10

typedef struct my_guest_table{
  char name[20];
  int roomNo;
  char inTime[26];
  char outTime[26];
}guest_table;

int service_shmid;
guest_table *my_guest_list;//[10];

int guest_count_shmid;
int *guest_count;


int insertItem(char *item, int thread_num) {
  fp = fopen("log","a");
  if( fp == NULL){
    printf("Error! File not Created\n");
    return -1;
  }else{
    fprintf(fp, "Room:     %3d\t%12s\t msec\n", thread_num, item);
    fclose(fp);
    return 0;
  }
}

int insertGuestBook(char *name, char *in_time, char *out_time, int room_id) {

  guest_book_fp = fopen("Guestbook.txt","a");
  if( guest_book_fp == NULL){
    printf("Error! File not Created\n");
    return -1;
  }else{
  fprintf( guest_book_fp, "%s\t%s\t%s ----\t%d \n",name , in_time, out_time, room_id);
    fclose(guest_book_fp);
    return 0;
  }
}

int insertOpccupancyTable(char *name, char *in_time, int room_id) {

  service_room_occu_fp = fopen("Occupancy1.txt","w");
  if( service_room_occu_fp == NULL){
    printf("Error! File not Created\n");
    return -1;
  }else{
  fprintf( service_room_occu_fp, "%s\t%s\t%d \n",name , in_time, room_id);
    fclose(service_room_occu_fp);
    return 0;
  }
}


void listReader()
{
  FILE *guest_list_fp;
  char buff[20];

  guest_list_fp = fopen("guest.txt","r");                         //Opening the file
  int line_count = 0;

  if(guest_list_fp == NULL)                                    //Checking if the file exist
    printf("Error! Guest list not found \n");

    while(fgets(buff,20,guest_list_fp) != NULL){
      strcpy(my_guest_list[ line_count ].name , buff);
      line_count++;
    }
    fclose(guest_list_fp);
}

void print_guestlist()
{
  int i;
  for (i = 0; i < 10; i++){
    printf("Service Room:1 Guest: %s\n", my_guest_list[i].name);
  }
}


void main(){

  pid_t mypid, parpid, child_pid;
  mypid = getpid();
  parpid = getppid();
  time_t timer;
  struct tm* in_time_info;
  struct tm* out_time_info;

  // printf("\n<<<Bhaat in abundance>>>\n");
  // printf("Child service_room_1: PID = %u, PPID = %u\n", mypid, parpid);

  bhaatEnable = sem_open("/bhaatEnable",0);

  service_shmid = shmget((key_t)SERVICE_ROOM_KEY, 10*sizeof(my_guest_list), 0644|IPC_CREAT);
  my_guest_list = (guest_table *)shmat(service_shmid, 0, 0);

  guest_count_shmid = shmget((key_t)GUEST_COUNT_KEY, 1*sizeof(int), 0644|IPC_CREAT);
  guest_count = (int *)shmat(guest_count_shmid,0,0);



 // listReader();
  // print_guestlist();

  int guest_number;
  while(1){
    guest_number = guest_count[0] % MAX_GUEST_NUMBER;
  // printf("Guest Count:%d",guest_count[0]);
    guest_count[0]++;
    strtok(my_guest_list[guest_number].name,"\n");
    my_guest_list[guest_number].roomNo=1;
    time(&timer);
    in_time_info = localtime(&timer);
    strftime(my_guest_list[guest_number].inTime, 26, "%Y:%m:%d %H:%M:%S", in_time_info);
    insertOpccupancyTable(my_guest_list[guest_number].name,my_guest_list[guest_number].inTime, my_guest_list[guest_number].roomNo);

    sem_wait(bhaatEnable);
    insertItem("To Bhaat Service Room", 1);


    // my_guest_list[guest_number].inTime=0;
    sleep(1);
    time(&timer);
    out_time_info = localtime(&timer);
    strftime(my_guest_list[guest_number].outTime, 26, "%Y:%m:%d %H:%M:%S", out_time_info);
    insertGuestBook(my_guest_list[guest_number].name,my_guest_list[guest_number].inTime, my_guest_list[guest_number].outTime, my_guest_list[guest_number].roomNo);

  }
  shmdt(my_guest_list);
  shmdt(guest_count);
}
