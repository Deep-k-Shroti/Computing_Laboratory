/** @file waiter.c
*  @brief The Waiter Process
*
*  The waiter process is integral to the hotel. The role of this process is to serve the
*  three resources, macch, dal and bhaat. But the chef process can cook and deliver only two items at once.
*  It models the scenario of serving with the help of three threads.
*
*  @author Deep K. Shroti
*  @bug No know bugs.
*/

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <error.h>
#include <errno.h>
#include <stdbool.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <fcntl.h>
#include <time.h>

#define CODE_END_KEY 7000
#define DAL_COUNTER_KEY 7001
#define BHAAT_COUNTER_KEY 7002
#define MAACH_COUNTER_KEY 7003
#define START_TIME_KEY 7008

#define handle_error_en(en, msg) \
do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static int serial_num  = 0;

pthread_t waiterThread1, waiterThread2, waiterThread3;
pthread_mutex_t waiter_mutex;

sem_t *maachSem, *dalSem, *bhaatSem;
sem_t *bhaatEnable, *dalEnable, *maachEnable ;

FILE *fp;
int waiter_thread1_Sleep, waiter_thread2_Sleep, waiter_thread3_Sleep;

int code_end_shmid;
int *code_end;

int dal_counter_shmid, maach_counter_shmid, bhaat_counter_shmid;
int *maach_counter, *dal_counter, *bhaat_counter;

int start_time_shmid;
clock_t *start_time;


/** @brief Thread 1 Serves Maach Dal or Maach Bhaat
*
*  This function helps to serve Maach Dal or Maach Bhaat.
*  To avoid race condition between the threads pthread_mutex_lock() function is used.
*  We have a pthread_mutex_t called 'waiter_mutex' will helps to avoid any race condition if possible.
*  sem_wait(), sem_post() functions are used for semaphore. It will ensure that no deadlock condition
*  between the producer and the consumer.
*
*
*  @param void
*  @return prints Maach Dal on the log
*  @return prints Maach Bhaat on the log
*/
// Maach prepared
void *waiterThreadFunc1(void *param) {
  // printf("waiterThreadFunc1:%d\n", getpid());
// sleep(4);
  while( 1 ){

    // printf("waiterThreadFunc1 ");

    if( (maach_counter[0] <= 0) && (dal_counter[0] <= 0) )
      break;


    /* acquire the mutex lock */
    sem_wait(maachSem);
    // sleep(1);
    pthread_mutex_lock(&waiter_mutex);
    // printf("%d, %d, %d\n",maach_counter[0],dal_counter[0],bhaat_counter[0]);
    if(((bhaat_counter[0]>0 && dal_counter[0]>0) || (dal_counter[0]>0 && maach_counter[0]>0) || (maach_counter[0]>0 && bhaat_counter[0]>0)) ){
      if (dal_counter[0] > 0){
        maach_counter[0]--;
        dal_counter[0]--;
        if(insertItem("Maach", 1)) {
          fprintf(stderr, " Producer report error condition\n");
        }
        else {
          if(insertItem("Dal", 1)){
            fprintf(stderr, " Producer report error condition\n");
          }else{
            sem_post(bhaatEnable);
          }
        }
      }
      else if(bhaat_counter[0] > 0){
        maach_counter[0]--;
        bhaat_counter[0]--;
        if(insertItem("Maach", 1)) {
          fprintf(stderr, " Producer report error condition\n");
        }
        else {
          if(insertItem("Bhaat", 1)){
            fprintf(stderr, " Producer report error condition\n");
          }else{
          sem_post(dalEnable);
          }
        }
      }

      /* release the mutex lock */
      pthread_mutex_unlock(&waiter_mutex);
    }else{
  break;

    }

      sleep(waiter_thread1_Sleep);

  }

}

/** @brief Thread 2 Serves Dal Maach or Dal Bhaat
*
*  This function helps to serve Dal Maach or Dal Bhaat.
*  To avoid race condition between the threads pthread_mutex_lock() function is used.
*  We have a pthread_mutex_t called 'waiter_mutex' will helps to avoid any race condition if possible.
*  sem_wait(), sem_post() functions are used for semaphore. It will ensure that no deadlock condition
*  between the producer and the consumer.
*
*
*  @param void
*  @return prints Dal Maach on the log
*  @return prints Dal Bhaat on the log
*/
// Dal prepared

void *waiterThreadFunc2(void *param) {
  // printf("waiterThreadFunc2:%d\n", getpid());
sleep(4);
 while(1){
    if( (maach_counter[0] <= 0) && (dal_counter[0] <= 0) )
      break;
    /* acquire the mutex lock */
    sem_wait(dalSem);
    // sleep(2);
    pthread_mutex_lock(&waiter_mutex);
    // printf("%d, %d, %d\n",maach_counter[0],dal_counter[0],bhaat_counter[0]);

    if(((bhaat_counter[0]>0 && dal_counter[0]>0) || (dal_counter[0]>0 && maach_counter[0]>0) || (maach_counter[0]>0 && bhaat_counter[0]>0)) ){

        if (maach_counter[0] > 0){
        dal_counter[0]--;
        maach_counter[0]--;
        if(insertItem("Dal", 2)) {
          fprintf(stderr, " Producer report error condition\n");
        }
        else {
          if(insertItem("Maach", 2)){
            fprintf(stderr, " Producer report error condition\n");
          }else{
          sem_post(bhaatEnable);
          }
        }
      }
      else if(bhaat_counter[0] > 0){
        dal_counter[0]--;
        bhaat_counter[0]--;
        if(insertItem("Dal", 2)) {
          fprintf(stderr, " Producer report error condition\n");
        }
        else {
          if(insertItem("Bhaat", 2)){
            fprintf(stderr, " Producer report error condition\n");
          }else{
          sem_post(maachEnable);
          }

        }
      }

      /* release the mutex lock */
      pthread_mutex_unlock(&waiter_mutex);
    }else{
    break;
    }
      sleep(waiter_thread2_Sleep);
  }
}


/** @brief Thread 3 Serves Bhaat Dal or Bhaat Maach
*
*  This function helps to serve Bhaat Dal or Bhaat Maach.
*  To avoid race condition between the threads pthread_mutex_lock() function is used.
*  We have a pthread_mutex_t called 'waiter_mutex' will helps to avoid any race condition if possible.
*  sem_wait(), sem_post() functions are used for semaphore. It will ensure that no deadlock condition
*  between the producer and the consumer.
*
*
*  @param void
*  @return prints Bhaat Dal on the log
*  @return prints Bhaat Maach on the log
*/

// Bhaat Prepared
void *waiterThreadFunc3(void *param) {
  // printf("waiterThreadFunc3:%d\n", getpid());
  sleep(4);
  while( 1 ){
    // printf("waiterThreadFunc3 ");


    if( (maach_counter[0] <= 0) && (dal_counter[0] <= 0) )
      break;
    /* acquire the mutex lock */
    sem_wait(bhaatSem);
    pthread_mutex_lock(&waiter_mutex);
    // printf("%d, %d, %d\n",maach_counter[0],dal_counter[0],bhaat_counter[0]);
    if(((bhaat_counter[0]>0 && dal_counter[0]>0) || (dal_counter[0]>0 && maach_counter[0]>0) || (maach_counter[0]>0 && bhaat_counter[0]>0))){

      if (dal_counter[0] > 0){
        bhaat_counter[0]--;
        dal_counter[0]--;
        if(insertItem("Bhaat", 3)) {
          fprintf(stderr, " Producer report error condition\n");
        }
        else {
          if(insertItem("Dal", 3)){
            fprintf(stderr, " Producer report error condition\n");
          }else{
        sem_post(maachEnable);
          }

        }
      }
      else if(maach_counter[0] > 0){
        bhaat_counter[0]--;
        maach_counter[0]--;
        if(insertItem("Bhaat", 3)) {
          fprintf(stderr, " Producer report error condition\n");
        }
        else {
          if(insertItem("Maach", 3)){
            fprintf(stderr, " Producer report error condition\n");
          }else{
          sem_post(dalEnable);
          }
        }
      }

      /* release the mutex lock */
      pthread_mutex_unlock(&waiter_mutex);
    }else{
    break;
    }
      sleep(waiter_thread3_Sleep);
  }
}





/** @brief Insert Item write a given item and thread number on the log
*
*  This function helps to write on the log
*  It takes input as the item, thread number.
*  It calculates the time at which the process is being written.
*
*
*  @param char *item the item to print on log
*  @param int thread_num the tread which calls this function
*  @return prints Thread, Item, and Time on the log
*
*/

int insertItem(char *item, int thread_num) {

  clock_t end;
  double elapsed;

  serial_num++;
  fp = fopen("log.csv","a");
  if( fp == NULL){
    printf("Error! File not Created\n");
    return -1;
  }else{
    end = clock();
    // printf("%s",item);
    elapsed = ((double) (end - start_time[0])) / CLOCKS_PER_SEC;
    fprintf(fp, "Waiter,%d,%s,%f msec", thread_num, item, elapsed*1000);
    fprintf(fp, ",\t\tMaach:%3d\t Dal:%3d\t Bhaat:%3d Code_end:%3d\n",maach_counter[0], dal_counter[0], bhaat_counter[0], code_end[0]);
    fclose(fp);
    return 0;
  }
}



/** @brief  The main function
*
*  The main function accepts input from the user in terms of
*  the sleep time and  to set the threads to sleep.
*  It creates three threads for different cases i.e. Maach prepared, Dal prepared , Bhaat prepared
*  Then it sleep the main function for a given seconds
*  Finally it joins all the threads and it exits the program.
*
*  @param char* argv[] the main function sleep time and the mode of thread sleep time
*  @return void
*
*/
void main(int argc, char *argv[]){

  pid_t mypid, parpid;

  // initializations
  int thread_status;
  pthread_mutex_init(&waiter_mutex, NULL);

  waiter_thread1_Sleep = atoi(argv[1]);
  waiter_thread2_Sleep = atoi(argv[2]);
  waiter_thread3_Sleep = atoi(argv[3]);
  // printf("waiter:thread1 sleep %d\n", waiter_thread1_Sleep);

  maachSem = sem_open("/maachSem",0);
  dalSem = sem_open("/dalSem",0);
  bhaatSem = sem_open("/bhaatSem",0);

  dalEnable = sem_open("/dalEnable",O_CREAT, 0644,0);
  bhaatEnable = sem_open("/bhaatEnable",O_CREAT, 0644,0);
  maachEnable = sem_open("/maachEnable",O_CREAT, 0644,0);


  code_end_shmid = shmget((key_t)CODE_END_KEY, sizeof(int),0777|IPC_CREAT);
  code_end = (int*)shmat(code_end_shmid, 0,0);

  dal_counter_shmid = shmget((key_t)DAL_COUNTER_KEY, sizeof(int),0777|IPC_CREAT);
  dal_counter = (int*)shmat(dal_counter_shmid, 0,0);

  bhaat_counter_shmid = shmget((key_t)BHAAT_COUNTER_KEY, sizeof(int),0777|IPC_CREAT);
  bhaat_counter = (int*)shmat(bhaat_counter_shmid, 0,0);

  maach_counter_shmid = shmget((key_t)MAACH_COUNTER_KEY, sizeof(int),0777|IPC_CREAT);
  maach_counter = (int*)shmat(maach_counter_shmid, 0,0);

  start_time_shmid = shmget((key_t)START_TIME_KEY,sizeof(clock_t),0777|IPC_CREAT);
  start_time = (clock_t *)shmat(start_time_shmid, 0,0);


  mypid = getpid();
  parpid = getppid();
  printf("Child Waiter: PID = %u, PPID = %u\n", mypid, parpid);

  thread_status = pthread_create(&waiterThread1, NULL, waiterThreadFunc1, NULL);
  if (thread_status != 0)
  handle_error_en(thread_status, "pthread_create");
  thread_status = pthread_create(&waiterThread2, NULL, waiterThreadFunc2, NULL);
  if (thread_status != 0)
  handle_error_en(thread_status, "pthread_create");
  thread_status = pthread_create(&waiterThread3, NULL, waiterThreadFunc3, NULL);
  if (thread_status != 0)
  handle_error_en(thread_status, "pthread_create");

  // Joining the threads to avoid Zombie threads..

  thread_status = pthread_join(waiterThread1, NULL);
  if (thread_status != 0)
  handle_error_en(thread_status, "pthread_join");
  printf("waiterThread1:joined\n");

  thread_status = pthread_join(waiterThread2, NULL);
  if (thread_status != 0)
  handle_error_en(thread_status, "pthread_join");
  printf("waiterThread2:joined\n");

  thread_status = pthread_join(waiterThread3, NULL);
  if (thread_status != 0)
  handle_error_en(thread_status, "pthread_join");
  printf("waiterThread3:joined\n");


  sem_unlink("/dalEnable");
  sem_unlink("/bhaatEnable");
  sem_unlink("/maachEnable");
  shmdt(code_end);
  shmdt(dal_counter);
  shmdt(maach_counter);
  shmdt(bhaat_counter);
  shmdt(start_time);

  printf("\nWaiter: Work done...\n");
  exit(0);
}
